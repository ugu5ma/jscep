#labels Featured
*jscep* is a fully-featured SCEP library for Java.

|| *Message* || *Description* || *Support* ||
|| GetCACert || CA Certificate Retrieval || <font color="green">✔</font> ||
|| PKCSReq || Certificate Enrolment || <font color="green">✔</font> ||
|| !GetCertInitial || Certificate Enrolment Polling || <font color="green">✔</font> ||
|| !GetCert || Certificate Access || <font color="green">✔</font> ||
|| GetCRL || CRL Access || <font color="green">✔</font> ||
|| GetNextCACert || Rollover Certificate Retrieval || <font color="green">✔</font> ||
|| GetCACaps || Capabilities Request || <font color="green">✔</font> ||

<wiki:toc/>

jSCEP aims to be fully compliant with the [http://tools.ietf.org/html/draft-nourse-scep latest SCEP Internet-Draft].  The following operations are supported in the current release:

== CA Profiles ==

Supports CA identifiers for SCEP servers supporting multiple CAs.

== Determining CA Capabilities ==

*Need to be careful that we don't describe the feature that the capability enables*.

=== Rollover Certificates ===

If the current CA certificate is about to expire, we can check to see if the CA has a certificate certified for _future_ use that we can use to sign our certificate.  This is available in the API, but there is no logic for use in the certificate.  Would be good to prompt user?

When the current CA certificate is ready to expire, we can retrieve the next CA instead.

*Not currently implemented.  Need to refactor signedData generator.*

It seems to make sense that if a CA has a replacement lined up, new certificates should use that.

=== HTTP POST ===

Sending requests over POST vs GET

=== Renewing Certificates ===

Does the CA support certificate renewal, or just enrollment of new certificates.

Signed by CA or third-party?

Provide a certificate signed by a third-party CA, or the current CA.

=== Supported Message Digest Algorithms ===

Does the CA support one of the following:

 * MD5
 * SHA-1
 * SHA-256
 * SHA-512

What is the strongest algorithm it supports?

=== Supported Cipher Algorithms ===

Does server support DES or Triple DES?  What is the strongest cipher supported by the CA?

== Retrieve CA Certificate ==

Retrieve the certificate used by the CA.  Need to know what to expect:

 * Fingerprint
 * Certificate
 * Truststore - this is really for use by the server.  For example, if an RA is used as an intermediary, the CA might allow all requests from the RA.  The RA, however, might require authentication using a PKCS #9 challengePassword.

== Retrieve "Rollover" CA Certificate ==

GetNextCACert

*This is currently broken.*

== Certificate Access ==

Retrieve a previously-signed certificate by issuer and serial number.

== CRL Access ==

Retrieves a CRL from the CA.

What about [http://tools.ietf.org/html/rfc5280 CRL distribution points]?

We can now recognise if a CA certificate supports distribution points, but there is significant effort required to _use_ those distribution points.

== Certificate Enrollment ==

Enroll a certificate, including renewal (if supported).  If the certificate enrollment process is manual, check to see if a certificate has been issued yet.  This will involve the implementation of a state machine.

The goal of the jSCEP project is simple: to produce a pure Java implementation of the SCEP protocol that complies with the [http://tools.ietf.org/html/draft-nourse-scep latest SCEP Internet-Draft], and is compatible with *any* compliant SCEP server implementation, including, but not limited to:

   * [http://ejbca.sourceforge.net/ EJBCA]
   * [http://www.openca.org/ OpenCA]