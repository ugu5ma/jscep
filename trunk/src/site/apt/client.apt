  ---
  Client
  ---

Constructing a Client

  In order to construct a client, we need two objects:
  
  * a URL
  
  * a Callback Handler
  
  []
  
* Determining the URL

  The URL should be obtained from your system administrator.  In the case of Microsoft NDES, the URL will look like so:
  
  <<<http://[host]/certsrv/mscep_admin/mscep.dll>>>
  
  In the case of EJBCA, it will look like so:
  
  <<<http://[host]/ejbca/publicweb/apply/scep/pkiclient.exe>>>
  
** Using HTTPS

  jscep uses {{{http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html}HttpURLConnection}} under the hood, and offers
  full support for HTTPS-enabled SCEP servers - although HTTPS is unnecessary.
   
  If your SCEP server requires the use of SSL to establish a connection, you may wish to configure {{{http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/HttpsURLConnection.html}HttpsURLConnection}}
  by using the static {{{http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/HttpsURLConnection.html#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)}setDefaultHostnameVerifier}}
  and {{{http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/HttpsURLConnection.html#setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)}setDefaultSSLSocketFactory}} methods.
  You'll only need to specify a <<<HostnameVerifier>>> if your SSL server provides a certificate that doesn't match the hostname in the SCEP URL.
  
  By default, <<<HttpsURLConnection>>> will use the <<<SSLSocketFactory>>> as specified by JSSE, so there should be no need to configure it directly.  For more information, read the {{{http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html}JSSE Reference Guide}},
  particularly the section on {{{http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#Customization}customization}}.

* Creating a Callback Handler

  The callback handler is used to verify the CA certificate being sent by the SCEP server is the certificate you expect.  With jscep, you can choose to use
  either the default callback mechanism with a choice of certificate verifiers, or to provide your own callback handler.
  
** Default Callback Mechanism

  The default callback mechanism provides a <<<DefaultCallbackHandler>>> which delegates verification to a <<<CertificateVerifier>>> implementation.  jscep supports several strategies for verifying a certificate,
  including pre-provisioned certificates or digests, and an interactive console verifier.
  
  The following example shows the steps necessary to configure the console verifier:
  
+-----------------+
  CertificateVerifier verifier = new ConsoleCertificateVerifier();
  CallbackHandler handler = new DefaultCallbackHandler(verifier);
+-----------------+

  By default, jscep will request verification before each operation.  If you are performing a number of operations against the same SCEP server, you
  may wish to cache the users response by decorating the certificate verifier, like so:
  
+-----------------+
  CertificateVerifier consoleVerifier = new ConsoleCertificateVerifier();
  CertificateVerifier verifier = new CachingCertificateVerifier(consoleVerifier);
  CallbackHandler handler = new DefaultCallbackHandler(verifier);
+-----------------+    

** Providing Your Own Callback Handler

  If you wish to use your own <<<CallbackHandler>>>, you must handle the <<<CertificateVerificationCallback>>>. 

Profiles

  If your SCEP server supports multiple CAs, your CA administrator must provide a string to identify the issuer to use.
  Each of the operations supported by jscep accepts an optional profile parameter in the form of a <<<String>>>.
  
  Because the jscep client is thread-safe, your application can invoke operations against multiple CA profiles <without>
  having to construct a new SCEP client.
  
  <<Note:>> Microsoft NDES always requires a profile.

Client Certificate

  In order to participate in a SCEP transaction, a SCEP client must have a certificate and key pair by which to identify itself.  Unless you have
  been issued with a certificate by your CA -- or by a CA trusted by your CA -- you must use a self-signed certificate.
  
* Generating a Key Pair

  The first step is the generation of an RSA key pair.  SCEP has no reported support for DSA or EC key pairs.
  
  <<Note:>> Implementations of the Java platform are <<required>> to support key sizes of 1,024 and 2,048 bits for RSA key pairs.

+---+
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
keyPairGenerator.initialize(1024);
KeyPair requesterKeyPair = keyPairGenerator.genKeyPair();
+---+

* Generating a Self-Signed Certificate

  The second step is the generation of an X509 Certificate.  JCA doesn't provide a mechanism for building certificates.  However, you can
  use Bouncy Castle to do it, using either the {{{http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cert/jcajce/JcaX509v1CertificateBuilder.html}JcaX509v1CertificateBuilder}}
  or the {{{http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cert/jcajce/JcaX509v3CertificateBuilder.html}JcaX509v3CertificateBuilder}}.
  
  The following example uses <<<JcaX509v3CertificateBuilder>>> for its X509 extension support.  Bouncy Castle provides classes and interfaces to 
  simplify the usage of extensions through the {{{http://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/asn1/x509/package-summary.html}org.bouncycastle.asn1.x509}} 
  package.
  
  If you don't require extensions, you can use <<<JcaX509v1CertificateBuilder>>>, which takes the same arguments as <<<JcaX509v3CertificateBuilder>>>
  in its JCA-compatible constructor.  In either case, you will need to provide a <<<ContentSigner>>>, which can be 
  built using {{{http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/operator/jcajce/JcaContentSignerBuilder.html}JcaContentSignerBuilder}}.
  SCEP supports the following signature algorithms:
  
  * MD5withRSA
  
  * SHA1withRSA
  
  * SHA256withRSA
  
  * SHA512withRSA
  
  []
  
  You can find out what algorithms are supported by your SCEP server by following the "CA Capabilities" section below.
  
  <<Note>>: if you're using a self-signed certificate, your certificate subject X500 name <must> be the same as the subject in your certificate-signing request.  
 
+---+
// Mandatory
X500Principal requesterIssuer = new X500Principal("CN=jscep.org, L=Cardiff, ST=Wales, C=UK");
BigInteger serial = BigInteger.ONE;
Calendar calendar = Calendar.getInstance();
calendar.add(Calendar.DATE, -1); // yesterday
Date notBefore = calendar.getTime();
calendar.add(Calendar.DATE, +2); // tomorrow
Date notAfter = calendar.getTime();
X500Principal requesterSubject = new X500Principal("CN=jscep.org, L=Cardiff, ST=Wales, C=UK"); // doesn't need to be the same as issuer
PublicKey requesterPubKey = requesterKeyPair.getPublic(); // from generated key pair
JcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(requesterIssuer, serial, notBefore, notAfter, requesterSubject, requesterPubKey);

// Optional extensions
certBuilder.addExtension(X509Extension.keyUsage, false, new KeyUsage(KeyUsage.digitalSignature));

// Signing
PrivateKey requesterPrivKey = requesterKeyPair.getPrivate(); // from generated key pair
JcaContentSignerBuilder certSignerBuilder = new JcaContentSignerBuilder("SHA1withRSA");
ContentSigner certSigner = signerBuilder.build(requesterPrivKey);

X509CertificateHolder certHolder = certBuilder.build(certSigner);
+---+

  You can extract a JCA-compatible certificate by using the {{{http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cert/jcajce/JcaX509CertificateConverter.html}JcaX509CertificateConverter}}:

+---+
JcaX509CertificateConverter converter = new JcaX509CertificateConverter();
X509Certificate requesterCert = converter.getCertificate(certHolder);
+---+

Certificate Enrollment

* Enrolling a Certificate

  When enrolling an entity into a PKI, you should generate a new key pair to represent the entity, like so:
  
+---+
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
keyPairGenerator.initialize(1024);
KeyPair entityKeyPair = keyPairGenerator.genKeyPair();
+---+

  We'll name this key pair <<<entityKeyPair>>> to distinguish it from the key pair used to represent the SCEP client, which is named <<<requesterKeyPair>>>.  After the key pair has been created, we
  need to start creating the signing request to send to the CA.  Since the JCA does not support the creation of CSRs, we'll use Bouncy Castle:
  
+---+
X500Principal entitySubject = requesterSubject;
PublicKey entityPubKey = entityPair.getPublic();
PKCS10CertificationRequestBuilder csrBuilder = new JcaPKCS10CertificationRequestBuilder(entitySubject, entityPubKey); 
+---+

  We can now use the <<<PKCS10CertificationRequestBuilder>>> to add extensions.  Depending on your SCEP server, you may need to provide
  additional extensions, but you must add at least a PKCS #9 <<<challengePassword>>>, like so:

+---+
DERPrintableString password = new DERPrintableString("password");
csrBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_challengePassword, password);
+---+

  When you've finished adding your extensions, you must then sign your CSR with your entity's private key.

+---+
PrivateKey entityPrivKey = entityPair.getPrivate();
JcaContentSignerBuilder csrSignerBuilder = new JcaContentSignerBuilder("SHA1withRSA");
ContentSigner csrSigner = csrSignerBuilder.build(entityPrivKey);
PKCS10CertificationRequest csr = csrBuilder.build(csrSigner);
+---+

  You now have everthing you need to enrol!

+---+
EnrollmentResponse res = client.enrol(requesterCert, requesterPrivKey, csr);
+---+

** Enrollment Response

  The <<<EnrollmentResponse>>> returned by <<<Client.enrol()>>> and <<<Client.poll()>>> should be inspected by your application
  to determine what to do next.  <<<EnrollmentResponse>>> contains three methods which can be used to determine the state
  of the response:
  
  * <<<isSuccess()>>>
  
  * <<<isPending()>>>
  
  * <<<isFailure()>>>
  
  []
  
  If <<<isSuccess()>>> returns <<<true>>>, your application should call <<<getCertStore()>>> to retrieve the enrolled certificates.  If
  <<<isFailure()>>> returns <<<true>>>, your application should call <<<getFailInfo()>>> to determine the reason for failure.  The last
  method, <<<isPending()>>>, is guaranteed to be <<<true>>> if the other two methods return <<<false>>>.  In the situation where the response
  is pending, your application should call <<<getTransactionId()>>>, and use the returned <<<TransactionId>>> when invoking <<<Client.poll()>>>,
  as detailed below.
  
  Invoking <<<getCertStore()>>> or <<<getFailInfo()>>> for a non-success or non-failure response will result in an <<<IllegalStateException>>>
  being thrown.  Applications may call <<<getTransactionId()>>> regardless of the response state.

* Polling for a Pending Enrollment

+---+
EnrollmentResponse res = client.poll(cert, keyPair.getPrivate(), subject, transId);
+---+

Non-Enrollment Operations

* CRL Access

  If you need to retrieve a CRL for a particular certificate.

+---+
X509CRL crl = client.getRevocationList(cert, keyPair.getPrivate(), issuer, serial);
+---+

* Certificate Access

  If you need to access a certificate that was previously issued, you need only pass the serial number of the certificate:

+---+
CertStore store = client.getCertificate(cert, keyPair.getPrivate(), serial);
+---+

* CA Capabilities

  This operation is used to determine how to interact with the server.  
  
  By default, jscep will invoke this operation to determine which algorithms to use when constructing secure message objects. 

+---+
Capabilities capabilities = client.getCaCapabilities();
+---+

  * Digest Algorithms:

    * MD5
  
    * SHA-1
  
    * SHA-256
  
    * SHA-512
  
    []
  
  * Ciphers:
  
    * DES
  
    * Triple DES
  
    []
  
  * Use of HTTP POST
  
  []
  
  See: {http://tools.ietf.org/html/draft-nourse-scep-23#appendix-C}

* CA Key Rollover

+---+
CertStore store = client.getRolloverCertificate();
+---+

  See: {http://tools.ietf.org/html/draft-nourse-scep-23#appendix-E}

* RA/CA Certificate Distribution

  Retrieving the CA and RA certificates from the SCEP server is an important operation.

+---+
CertStore store = client.getCaCertificate();
+---+

References

  * {{{http://www.bouncycastle.org/docs/pkixdocs1.5on/index.html}Bouncy Castle PKIX and CMS Documentation}}
  
  * {{{http://www.bouncycastle.org/docs/docs1.5on/index.html}Bouncy Castle Provider and Main Documentation}}
  
  * {{{http://docs.oracle.com/javase/6/docs/technotes/guides/security/}Java 6 Security}}
  
  []